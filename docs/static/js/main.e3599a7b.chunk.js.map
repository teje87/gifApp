{"version":3,"sources":["serviceWorker.js","components/AddCategory.js","components/GifGridItem.js","helpers/GetGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["Boolean","window","location","hostname","match","AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","length","cats","type","value","onChange","target","defaultProps","GifGridItem","id","title","url","className","key","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","el","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","img","GifExpertApp","categories","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+JAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCfAC,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEHC,mBAAS,IAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAgBvC,OACI,oCACI,4CACA,0BAAMC,SAXO,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAS,IACnBP,GAAe,SAAAQ,GAAI,OAAKN,GAAL,mBAAoBM,OACvCL,EAAc,OAQV,2BACIM,KAAK,OACLC,MAAOR,EACPS,SAnBG,SAACN,GAChBF,EAAcE,EAAEO,OAAOF,aA8B/BX,EAAYc,aAAe,GAIZd,QCxCFe,EAAc,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAErC,OACI,yBAAKC,UAAU,0CACX,yBAAKC,IAAKJ,EAAIK,IAAKH,EAAKI,IAAKL,IAC7B,2BAAIA,K,uBCSDM,EAhBF,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACNP,EADM,0FACmFQ,UAAUF,IAD7F,SAEOG,MAAMT,GAFb,cAENU,EAFM,gBAGWA,EAAKC,OAHhB,uBAGJC,EAHI,EAGJA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAO,CACHjB,GAAIiB,EAAGjB,GACPC,MAAOgB,EAAGhB,MACVC,IAAG,UAAEe,EAAGC,cAAL,aAAE,EAAWC,iBAAiBjB,QAT7B,kBAaLa,GAbK,4CAAH,sDCMPK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECHN,SAACA,GAAc,IAAD,EAEZtB,mBAAS,CAAE4B,KAAM,GAAIO,SAAS,IAFlB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAQtC,OAJAC,qBAAU,WACNjB,EAAQC,GAAUiB,MAAK,SAAAC,GAAI,OAAKH,EAAS,CAACT,KAAMY,EAAML,SAAS,SACjE,CAACb,IAEIc,EDHmBK,CAAanB,GAA/BM,EAFsB,EAEtBA,KAAMO,EAFgB,EAEhBA,QAGd,OACI,oCACI,4BAAKb,GACL,yBAAKL,UAAU,aACX,6BACEkB,GAAW,aACXP,EAAKE,KAAI,SAACY,GACR,OAAO,kBAAC,EAAD,eAAcxB,IAAKwB,EAAI5B,IAAQ4B,UAW1DR,EAAQtB,aAAe,GAIRsB,QERAS,MArBf,WAAyB,IAAD,EAEgB3C,mBAAS,IAFzB,mBAEb4C,EAFa,KAED7C,EAFC,KAKpB,OACI,oCACI,4CACA,6BACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,4BAEI6C,EAAWd,KAAK,SAACR,GAAD,OACZ,kBAAC,EAAD,CAAUJ,IAAKI,EAAUA,SAAUA,UCXvDuB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SPyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAAAc,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e3599a7b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('')\n\n    const handleType = (e)=> {\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if(inputValue.length > 2){\n            setCategories( cats => [inputValue, ...cats]);\n            setInputValue('');\n        }\n    }\n\n    return (\n        <>\n            <h2>Add Category</h2>  \n            <form onSubmit={handleSubmit}>\n                <input \n                    type=\"text\"\n                    value={inputValue}\n                    onChange={handleType}\n                /> \n            </form>\n            \n        </>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nAddCategory.defaultProps = {\n\n}\n\nexport default AddCategory;","import React from 'react'\n\nexport const GifGridItem = ({ id, title, url }) => {\n    \n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img key={id} src={url} alt={title}/>\n            <p>{title}</p>\n        </div>\n    )\n}\n","const getGifs = async(category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=cvt4JhB5xZoJWupAthMWcLn1ltfGHXZM&q=${encodeURI(category)}`\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map(el => {\n        return {\n            id: el.id,\n            title: el.title,\n            url: el.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n};\n\nexport default getGifs;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { GifGridItem } from './GifGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\n\nconst GifGrid = ({ category }) => {\n\n    const { data, loading } = useFetchGifs(category);\n\n\n    return (\n        <>\n            <h2>{category}</h2>\n            <div className=\"card-grid\">    \n                <hr/>\n                { loading && 'Loading...'}\n                { data.map((img)=> {\n                    return <GifGridItem  key={img.id} {...img}></GifGridItem>\n                })}\n            </div>\n        </>\n    )\n}\n\nGifGrid.propTypes = {\n    category: PropTypes.string\n}\n\nGifGrid.defaultProps = {\n\n}\n\nexport default GifGrid;","import { useState, useEffect } from 'react';\nimport getGifs from '../helpers/GetGifs';\n\nexport const useFetchGifs = (category) => {\n   \n    const [state, setState] = useState({ data: [], loading: true});\n\n    useEffect(()=> {\n        getGifs(category).then(imgs =>  setState({data: imgs, loading: false}))\n    },[category])\n\n    return state;\n}\n\n\n\n\n\n","import React, { useState } from 'react'\nimport AddCategory  from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nfunction GifExpertApp() {\n    \n    const [categories, setCategories] = useState([]);\n    \n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <hr></hr>\n            <AddCategory setCategories={setCategories}/>\n            <ol>\n            { \n                categories.map( (category) =>\n                    <GifGrid  key={category} category={category}></GifGrid>)\n            }\n            </ol>\n            \n        </>\n    )\n}\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}